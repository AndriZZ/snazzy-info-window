{"version":3,"sources":["snazzy-info-window.js"],"names":["copyKeys","target","source","Object","keys","forEach","key","mergeDefaultOptions","opts","copy","_defaultOptions","obj","_typeof","objCopy","parseAttribute","attribute","defaultValue","re","test","match","exec","number","units","value","original","setHTML","container","content","firstChild","removeChild","innerHTML","appendChild","_classPrefix","_root2","_inverseRoot2","_defaultShadow","h","v","blur","spread","color","position","pointer","openOnMarkerClick","closeOnMapClick","showCloseButton","panOnOpen","edgeOffset","top","right","bottom","left","SnazzyInfoWindow","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","_html","_opts","_callbacks","callbacks","_marker","marker","_isOpen","_listeners","google","_openOnMarkerClickListener","maps","event","addListener","getMap","open","p","toLowerCase","undefined","border","shadow","callback","lamda","apply","listener","removeListener","result","activateCallback","setMap","clearListeners","_this2","charAt","toUpperCase","slice","capitalizedPosition","offset","wrapper","style","marginLeft","marginTop","bg","backgroundColor","pointerBg","padding","contentWrapper","shadowFrame","borderRadius","fontColor","fontSize","width","bWidth","borderWidth","Math","round","borderColor","pointerBorder","shadowPointer","height","isSet","hOffset","vOffset","formatBoxShadow","boxShadow","hRotated","vRotated","shadowPointerInner","opacity","shadowWrapper","markerPos","getProjection","fromLatLngToDivPixel","floatWrapper","floor","y","x","resize","reposition","_this3","applyCss","element","args","i","length","className","newElement","_len","arguments","Array","_key","document","createElement","wrapperClass","closeButtonMarkup","d","closeButton","setAttribute","getPanes","floatPane","map","push","close","_previousWidth","_previousHeight","getDiv","ow","offsetWidth","oh","offsetHeight","pw","ph","draw","addDomListener","e","cancelBubble","stopPropagation","mouseEvents","parent","parentElement","mb","getBoundingClientRect","mib","getMapInnerBounds","wb","dx","dy","panBy","maxWidth","min","maxHeight","OverlayView"],"mappings":"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","file":"snazzy-info-window.min.js","sourcesContent":["// Global variables\r\nconst _classPrefix = 'si-';\r\nconst _root2 = 1.41421356237;\r\nconst _inverseRoot2 = 0.7071067811865474;\r\nconst _defaultShadow = {\r\n    h: '0px',\r\n    v: '3px',\r\n    blur: '6px',\r\n    spread: '0px',\r\n    color: '#000'\r\n};\r\nconst _defaultOptions = {\r\n    position: 'top',\r\n    pointer: true,\r\n    openOnMarkerClick: true,\r\n    closeOnMapClick: true,\r\n    showCloseButton: true,\r\n    panOnOpen: true,\r\n    edgeOffset: {\r\n        top: 20,\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 20\r\n    }\r\n};\r\n\r\n// Copy keys from the source into the target\r\nfunction copyKeys(target, source) {\r\n    if (target && source) {\r\n        Object.keys(source).forEach((key) => {\r\n            target[key] = source[key];\r\n        });\r\n    }\r\n}\r\n\r\n// We need to safely merge options from the defaults. This will make\r\n// sure settings like edgeOffset are properly assigned.\r\nfunction mergeDefaultOptions(opts) {\r\n    const copy = {};\r\n    copyKeys(copy, _defaultOptions);\r\n    copyKeys(copy, opts);\r\n    Object.keys(_defaultOptions).forEach((key) => {\r\n        const obj = _defaultOptions[key];\r\n        if (typeof obj === 'object') {\r\n            const objCopy = {};\r\n            copyKeys(objCopy, obj);\r\n            copyKeys(objCopy, copy[key]);\r\n            copy[key] = objCopy;\r\n        }\r\n    });\r\n    return copy;\r\n}\r\n\r\n// Parse a css attribute into the numeric portion and the units\r\nfunction parseAttribute(attribute, defaultValue) {\r\n    // 1em, 1.0em, 0.1em, .1em, 1.    em\r\n    const re = /^(-{0,1}\\.{0,1}\\d+(\\.\\d+)?)[\\s|\\.]*(\\w*)$/;\r\n    if (attribute && re.test(attribute)) {\r\n        const match = re.exec(attribute);\r\n        const number = match[1];\r\n        const units = match[3] || 'px';\r\n        return { value: number * 1, units, original: attribute };\r\n    }\r\n    if (defaultValue) {\r\n        return parseAttribute(defaultValue);\r\n    }\r\n    return { original: defaultValue };\r\n}\r\n\r\n// Set the html of a container. Should support both raw text and a single\r\n// DOM Element.\r\nfunction setHTML(container, content) {\r\n    if (container) {\r\n        // Clear out everything in the container\r\n        while (container.firstChild) {\r\n            container.removeChild(container.firstChild);\r\n        }\r\n        if (content) {\r\n            if (typeof content === 'string') {\r\n                container.innerHTML = content;\r\n            } else {\r\n                container.appendChild(content);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default class SnazzyInfoWindow extends google.maps.OverlayView {\r\n\r\n    constructor(opts) {\r\n        super(opts);\r\n        // Private properties\r\n        this._html = null;\r\n        this._opts = mergeDefaultOptions(opts);\r\n        this._callbacks = this._opts.callbacks || {};\r\n        this._marker = this._opts.marker;\r\n        this._isOpen = false;\r\n        this._listeners = [];\r\n\r\n        // This listener remains active when the info window is closed.\r\n        if (google && this._marker && this._opts.openOnMarkerClick) {\r\n            this._openOnMarkerClickListener = google.maps.event.addListener(this._marker, 'click', () => {\r\n                if (!this.getMap()) {\r\n                    this.open();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Validate the options\r\n        let p = this._opts.position;\r\n        if (p) {\r\n            p = p.toLowerCase();\r\n        }\r\n        if (p !== 'top' && p !== 'bottom' &&\r\n            p !== 'left' && p !== 'right') {\r\n            this._opts.position = _defaultOptions.position;\r\n        }\r\n        if (this._opts.border === undefined) {\r\n            this._opts.border = {};\r\n        }\r\n        if (this._opts.pointer === undefined) {\r\n            this._opts.pointer = _defaultOptions.pointer;\r\n        }\r\n        if (this._opts.shadow === undefined) {\r\n            this._opts.shadow = {};\r\n        }\r\n    }\r\n\r\n    // Activate the specified callback and return the result\r\n    activateCallback(callback) {\r\n        const lamda = this._callbacks[callback];\r\n        return lamda ? lamda.apply(this) : undefined;\r\n    }\r\n\r\n    // Will clear all listeners that are used during the open state.\r\n    clearListeners() {\r\n        if (google) {\r\n            if (this._listeners) {\r\n                this._listeners.forEach((listener) => {\r\n                    google.maps.event.removeListener(listener);\r\n                });\r\n            }\r\n            this._listeners = [];\r\n        }\r\n    }\r\n\r\n    // Open the info window after attaching to a specific marker.\r\n    open() {\r\n        const result = this.activateCallback('beforeOpen');\r\n        if (result !== undefined && !result) {\r\n            return;\r\n        }\r\n        if (this._marker) {\r\n            this.setMap(this._marker.getMap());\r\n        }\r\n    }\r\n\r\n    // Close the info window.\r\n    close() {\r\n        const result = this.activateCallback('beforeClose');\r\n        if (result !== undefined && !result) {\r\n            return;\r\n        }\r\n        this.clearListeners();\r\n        this.setMap(null);\r\n    }\r\n\r\n    // Force close the map and remove any event listeners attached to google\r\n    destroy() {\r\n        if (this.getMap()) {\r\n            this.setMap(null);\r\n        }\r\n\r\n        if (google) {\r\n            if (this._openOnMarkerClickListener) {\r\n                google.maps.event.removeListener(this._openOnMarkerClickListener);\r\n                this._openOnMarkerClickListener = null;\r\n            }\r\n        }\r\n        this.clearListeners();\r\n    }\r\n\r\n    setContent(content) {\r\n        this._opts.content = content;\r\n        if (this._html && this._html.content) {\r\n            setHTML(this._html.content, content);\r\n        }\r\n    }\r\n\r\n    // Implementation of OverlayView draw method.\r\n    draw() {\r\n        if (!this._marker || !this._html) {\r\n            return;\r\n        }\r\n\r\n        // Returns a capitalized position for assigning styles\r\n        let p = this._opts.position;\r\n        p = p.charAt(0).toUpperCase() + p.slice(1);\r\n        const capitalizedPosition = p;\r\n\r\n        // 1. Assign offset\r\n        const offset = this._opts.offset;\r\n        if (offset) {\r\n            if (offset.left) {\r\n                this._html.wrapper.style.marginLeft = offset.left;\r\n            }\r\n            if (offset.top) {\r\n                this._html.wrapper.style.marginTop = offset.top;\r\n            }\r\n        }\r\n        // 2. Set the background color\r\n        const bg = this._opts.backgroundColor;\r\n        if (bg) {\r\n            this._html.content.style.backgroundColor = bg;\r\n            if (this._opts.pointer) {\r\n                this._html.pointerBg.style[`border${capitalizedPosition}Color`] = bg;\r\n            }\r\n        }\r\n        // 3. Padding\r\n        if (this._opts.padding) {\r\n            this._html.contentWrapper.style.padding = this._opts.padding;\r\n            this._html.shadowFrame.style.padding = this._opts.padding;\r\n        }\r\n        // 4. Border radius\r\n        if (this._opts.borderRadius) {\r\n            this._html.contentWrapper.style.borderRadius = this._opts.borderRadius;\r\n            this._html.shadowFrame.style.borderRadius = this._opts.borderRadius;\r\n        }\r\n        // 5. Font Color\r\n        if (this._opts.fontColor) {\r\n            this._html.wrapper.style.color = this._opts.fontColor;\r\n        }\r\n        // 6. Font Size\r\n        if (this._opts.fontSize) {\r\n            this._html.wrapper.style.fontSize = this._opts.fontSize;\r\n        }\r\n        // 7. Border\r\n        if (this._opts.border) {\r\n            if (this._opts.border.width !== undefined) {\r\n                const bWidth = parseAttribute(this._opts.border.width, '0px');\r\n                this._html.contentWrapper.style.borderWidth = bWidth.value + bWidth.units;\r\n                if (this._opts.pointer) {\r\n                    this._html.pointerBg.style[this._opts.position] =\r\n                        Math.round(-bWidth.value * _root2) + bWidth.units;\r\n                }\r\n            }\r\n            const color = this._opts.border.color;\r\n            if (color) {\r\n                this._html.contentWrapper.style.borderColor = color;\r\n                if (this._opts.pointer) {\r\n                    this._html.pointerBorder.style[`border${capitalizedPosition}Color`] = color;\r\n                }\r\n            }\r\n        } else {\r\n            // Hide the border when border is set to false\r\n            this._html.content.style.borderWidth = 0;\r\n            if (this._opts.pointer) {\r\n                this._html.pointerBg.style[this._opts.position] = 0;\r\n            }\r\n        }\r\n        // 8. Pointer\r\n        // Check if the pointer is enabled. Also make sure the value isn't just the boolean true.\r\n        if (this._opts.pointer && this._opts.pointer !== true) {\r\n            if (this._opts.shadow) {\r\n                this._html.shadowPointer.style.width = this._opts.pointer;\r\n                this._html.shadowPointer.style.height = this._opts.pointer;\r\n            }\r\n            this._html.pointerBorder.style.borderWidth = this._opts.pointer;\r\n            this._html.pointerBg.style.borderWidth = this._opts.pointer;\r\n        }\r\n\r\n        // 9. Shadow\r\n        if (this._opts.shadow) {\r\n            // Check if any of the shadow settings have actually been set\r\n            const shadow = this._opts.shadow;\r\n            const isSet = (attribute) => {\r\n                const v = shadow[attribute];\r\n                return v !== undefined && v != null;\r\n            };\r\n\r\n            if (isSet('h') || isSet('v') || isSet('blur') || isSet('spread') || isSet('color')) {\r\n                const hOffset = parseAttribute(shadow.h, _defaultShadow.h);\r\n                const vOffset = parseAttribute(shadow.v, _defaultShadow.v);\r\n                const blur = parseAttribute(shadow.blur, _defaultShadow.blur);\r\n                const spread = parseAttribute(shadow.spread, _defaultShadow.spread);\r\n                const color = shadow.color || _defaultShadow.color;\r\n                const formatBoxShadow = (h, v) => {\r\n                    return `${h} ${v} ${blur.original} ${spread.original} ${color}`;\r\n                };\r\n\r\n                this._html.shadowFrame.style.boxShadow =\r\n                    formatBoxShadow(hOffset.original, vOffset.original);\r\n\r\n                // Correctly rotate the shadows before the css transform\r\n                const hRotated = (_inverseRoot2 * (hOffset.value - vOffset.value)) + hOffset.units;\r\n                const vRotated = (_inverseRoot2 * (hOffset.value + vOffset.value)) + vOffset.units;\r\n                this._html.shadowPointerInner.style.boxShadow = formatBoxShadow(hRotated, vRotated);\r\n            }\r\n            if (this._opts.shadow.opacity) {\r\n                this._html.shadowWrapper.style.opacity = this._opts.shadow.opacity;\r\n            }\r\n        }\r\n\r\n        const markerPos = this.getProjection().fromLatLngToDivPixel(this._marker.position);\r\n        this._html.floatWrapper.style.top = `${Math.floor(markerPos.y)}px`;\r\n        this._html.floatWrapper.style.left = `${Math.floor(markerPos.x)}px`;\r\n\r\n        if (!this._isOpen) {\r\n            this._isOpen = true;\r\n            this.resize();\r\n            this.reposition();\r\n            this.activateCallback('afterOpen');\r\n        }\r\n    }\r\n\r\n    // Implementation of OverlayView onAdd method.\r\n    onAdd() {\r\n        if (this._html) {\r\n            return;\r\n        }\r\n        // Used for creating new elements\r\n        const applyCss = (element, args) => {\r\n            if (element && args) {\r\n                for (let i = 0; i < args.length; i++) {\r\n                    const className = args[i];\r\n                    if (className) {\r\n                        if (element.className) {\r\n                            element.className += ' ';\r\n                        }\r\n                        element.className += _classPrefix + className;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        const newElement = (...args) => {\r\n            const element = document.createElement('div');\r\n            applyCss(element, args);\r\n            return element;\r\n        };\r\n\r\n        this._html = {};\r\n\r\n        // 1. Create the wrapper\r\n        this._html.wrapper = newElement(\r\n            `wrapper-${this._opts.position}`\r\n        );\r\n        if (this._opts.wrapperClass) {\r\n            this._html.wrapper.className += ` ${this._opts.wrapperClass}`;\r\n        }\r\n\r\n        // 2. Create the shadow\r\n        if (this._opts.shadow) {\r\n            this._html.shadowWrapper = newElement(\r\n                `shadow-wrapper-${this._opts.position}`\r\n            );\r\n            this._html.shadowFrame = newElement(\r\n                'frame',\r\n                'shadow-frame'\r\n            );\r\n            this._html.shadowWrapper.appendChild(this._html.shadowFrame);\r\n\r\n            if (this._opts.pointer) {\r\n                this._html.shadowPointer = newElement(\r\n                    `shadow-pointer-${this._opts.position}`\r\n                );\r\n                this._html.shadowPointerInner = newElement(\r\n                    `shadow-inner-pointer-${this._opts.position}`\r\n                );\r\n                this._html.shadowPointer.appendChild(this._html.shadowPointerInner);\r\n                this._html.shadowWrapper.appendChild(this._html.shadowPointer);\r\n            }\r\n\r\n            this._html.wrapper.appendChild(this._html.shadowWrapper);\r\n        }\r\n\r\n        // 3. Create the content\r\n        this._html.contentWrapper = newElement(\r\n            'frame',\r\n            'content-wrapper'\r\n        );\r\n        this._html.content = newElement(\r\n            'content'\r\n        );\r\n        if (this._opts.content) {\r\n            setHTML(this._html.content, this._opts.content);\r\n        }\r\n\r\n        // 4. Create the close button\r\n        if (this._opts.showCloseButton) {\r\n            if (this._opts.closeButtonMarkup) {\r\n                const d = document.createElement('div');\r\n                setHTML(d, this._opts.closeButtonMarkup);\r\n                this._html.closeButton = d.firstChild;\r\n            } else {\r\n                this._html.closeButton = document.createElement('button');\r\n                this._html.closeButton.setAttribute('type', 'button');\r\n                this._html.closeButton.innerHTML = '&#215;';\r\n                applyCss(this._html.closeButton, ['close-button']);\r\n            }\r\n            this._html.contentWrapper.appendChild(this._html.closeButton);\r\n        }\r\n        this._html.contentWrapper.appendChild(this._html.content);\r\n        this._html.wrapper.appendChild(this._html.contentWrapper);\r\n\r\n        // 5. Create the pointer\r\n        if (this._opts.pointer) {\r\n            this._html.pointerBorder = newElement(\r\n                `pointer-${this._opts.position}`,\r\n                `pointer-border-${this._opts.position}`\r\n            );\r\n            this._html.pointerBg = newElement(\r\n                `pointer-${this._opts.position}`,\r\n                `pointer-bg-${this._opts.position}`\r\n            );\r\n            this._html.wrapper.appendChild(this._html.pointerBorder);\r\n            this._html.wrapper.appendChild(this._html.pointerBg);\r\n        }\r\n\r\n        // Create an outer wrapper\r\n        this._html.floatWrapper = newElement(\r\n            'float-wrapper'\r\n        );\r\n        this._html.floatWrapper.appendChild(this._html.wrapper);\r\n\r\n        // Add the wrapper to the Google Maps float pane\r\n        this.getPanes().floatPane.appendChild(this._html.floatWrapper);\r\n\r\n        // Now add all the event listeners\r\n        const map = this.getMap();\r\n        this.clearListeners();\r\n        if (this._opts.closeOnMapClick) {\r\n            this._listeners.push(google.maps.event.addListener(map, 'click', () => {\r\n                this.close();\r\n            }));\r\n        }\r\n        if (google) {\r\n            // Clear out the previous map bounds\r\n            this._previousWidth = null;\r\n            this._previousHeight = null;\r\n            this._listeners.push(google.maps.event.addListener(map, 'bounds_changed', () => {\r\n                const d = map.getDiv();\r\n                const ow = d.offsetWidth;\r\n                const oh = d.offsetHeight;\r\n                const pw = this._previousWidth;\r\n                const ph = this._previousHeight;\r\n                if (pw === null || ph === null || pw !== ow || ph !== oh) {\r\n                    this._previousWidth = ow;\r\n                    this._previousHeight = oh;\r\n                    this.resize();\r\n                }\r\n            }));\r\n\r\n            // Marker moves\r\n            if (this._marker) {\r\n                this._listeners.push(google.maps.event.addListener(this._marker,\r\n                    'position_changed', () => {\r\n                        this.draw();\r\n                    }));\r\n            }\r\n\r\n            // Close button\r\n            if (this._opts.showCloseButton && !this._opts.closeButtonMarkup) {\r\n                this._listeners.push(google.maps.event.addDomListener(this._html.closeButton,\r\n                    'click', (e) => {\r\n                        e.cancelBubble = true;\r\n                        if (e.stopPropagation) {\r\n                            e.stopPropagation();\r\n                        }\r\n                        this.close();\r\n                    }));\r\n            }\r\n\r\n            // Stop the mouse event propagation\r\n            const mouseEvents = ['click', 'dblclick', 'rightclick',\r\n                'drag', 'dragend', 'dragstart',\r\n                'mousedown', 'mouseout', 'mouseover', 'mouseup',\r\n                'touchstart', 'touchend', 'touchmove',\r\n                'wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];\r\n            mouseEvents.forEach((event) => {\r\n                this._listeners.push(google.maps.event.addDomListener(this._html.wrapper,\r\n                    event, (e) => {\r\n                        e.cancelBubble = true;\r\n                        if (e.stopPropagation) {\r\n                            e.stopPropagation();\r\n                        }\r\n                    }));\r\n            });\r\n        }\r\n\r\n\r\n        this.activateCallback('open');\r\n    }\r\n\r\n    // Implementation of OverlayView onRemove method\r\n    onRemove() {\r\n        this.activateCallback('close');\r\n        if (this._html) {\r\n            const parent = this._html.floatWrapper.parentElement;\r\n            if (parent) {\r\n                parent.removeChild(this._html.floatWrapper);\r\n            }\r\n            this._html = null;\r\n        }\r\n        this._isOpen = false;\r\n        this.activateCallback('afterClose');\r\n    }\r\n\r\n    // The map inner bounds used for panning and resizing\r\n    getMapInnerBounds() {\r\n        const mb = this.getMap().getDiv().getBoundingClientRect();\r\n        const mib = {\r\n            top: mb.top + this._opts.edgeOffset.top,\r\n            right: mb.right - this._opts.edgeOffset.right,\r\n            bottom: mb.bottom - this._opts.edgeOffset.bottom,\r\n            left: mb.left + this._opts.edgeOffset.left\r\n        };\r\n        mib.width = mib.right - mib.left;\r\n        mib.height = mib.bottom - mib.top;\r\n        return mib;\r\n    }\r\n\r\n    // Pan the google map such that the info window is visible\r\n    reposition() {\r\n        if (!this._opts.panOnOpen || !this._html) {\r\n            return;\r\n        }\r\n        const mib = this.getMapInnerBounds();\r\n        const wb = this._html.wrapper.getBoundingClientRect();\r\n        let dx = 0;\r\n        let dy = 0;\r\n        if (mib.left >= wb.left) {\r\n            dx = wb.left - mib.left;\r\n        } else if (mib.right <= wb.right) {\r\n            dx = wb.left - (mib.right - wb.width);\r\n        }\r\n        if (mib.top >= wb.top) {\r\n            dy = wb.top - mib.top;\r\n        } else if (mib.bottom <= wb.bottom) {\r\n            dy = wb.top - (mib.bottom - wb.height);\r\n        }\r\n        if (dx !== 0 || dy !== 0) {\r\n            this.getMap().panBy(dx, dy);\r\n        }\r\n    }\r\n\r\n    // Resize the info window to fit within the map bounds and edge offset\r\n    resize() {\r\n        if (!this._html) {\r\n            return;\r\n        }\r\n        const mib = this.getMapInnerBounds();\r\n        // Handle the max width\r\n        let maxWidth = mib.width;\r\n        if (this._opts.maxWidth !== undefined) {\r\n            maxWidth = Math.min(maxWidth, this._opts.maxWidth);\r\n        }\r\n        maxWidth -= (this._html.wrapper.offsetWidth - this._html.content.offsetWidth);\r\n        this._html.content.style.maxWidth = `${maxWidth}px`;\r\n\r\n        // Handle the max height\r\n        let maxHeight = mib.height;\r\n        if (this._opts.maxHeight !== undefined) {\r\n            maxHeight = Math.min(maxHeight, this._opts.maxHeight);\r\n        }\r\n        maxHeight -= (this._html.wrapper.offsetHeight - this._html.content.offsetHeight);\r\n        this._html.content.style.maxHeight = `${maxHeight}px`;\r\n    }\r\n}\r\n"]}