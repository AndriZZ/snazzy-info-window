{"version":3,"sources":["snazzy-info-window.js"],"names":["parseAttribute","attribute","defaultValue","re","test","match","exec","number","units","value","original","_classPrefix","_root2","_inverseRoot2","_defaultShadow","h","v","blur","spread","color","SnazzyInfoWindow","opts","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_marker","_floatWrapper","_opts","p","position","toLowerCase","undefined","border","pointer","shadow","className","lambda","elements","getElementsByClassName","i","length","apply","marker","_this2","google","maps","event","addListener","open","setMap","getMap","_this3","charAt","toUpperCase","slice","capitalizedPosition","offset","left","eachByClassName","e","style","marginLeft","top","marginTop","bg","backgroundColor","padding","borderRadius","fontColor","fontSize","width","bWidth","borderWidth","Math","round","borderColor","height","isSet","hOffset","vOffset","formatBoxShadow","boxShadow","hRotated","vRotated","opacity","markerPos","getProjection","fromLatLngToDivPixel","floor","y","x","newElement","_len","arguments","args","Array","_key","element","document","createElement","wrapper","wrapperClass","shadowWrapper","shadowFrame","appendChild","shadowPointer","shadowPointerInner","contentWrapper","content","innerHTML","pointerBorder","pointerBg","floatWrapper","getPanes","floatPane","parent","parentElement","removeChild","OverlayView"],"mappings":"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","file":"snazzy-info-window.min.js","sourcesContent":["// Global variables\r\nconst _classPrefix = 'si-';\r\nconst _root2 = 1.41421356237;\r\nconst _inverseRoot2 = 0.7071067811865474;\r\nconst _defaultShadow = {\r\n    h: '0px',\r\n    v: '3px',\r\n    blur: '6px',\r\n    spread: '0px',\r\n    color: '#000'\r\n};\r\n\r\n// Parse a css attribute into the numeric portion and the units\r\nfunction parseAttribute(attribute, defaultValue) {\r\n    // 1em, 1.0em, 0.1em, .1em, 1.    em\r\n    const re = /^(-{0,1}\\.{0,1}\\d+(\\.\\d+)?)[\\s|\\.]*(\\w*)$/;\r\n    if (attribute && re.test(attribute)) {\r\n        const match = re.exec(attribute);\r\n        const number = match[1];\r\n        const units = match[3] || 'px';\r\n        return { value: number * 1, units, original: attribute };\r\n    }\r\n    if (defaultValue) {\r\n        return parseAttribute(defaultValue);\r\n    }\r\n    return { original: defaultValue };\r\n}\r\n\r\nexport default class SnazzyInfoWindow extends google.maps.OverlayView {\r\n\r\n    constructor(opts) {\r\n        super(opts);\r\n        // Private properties\r\n        this._marker = null;\r\n        this._floatWrapper = null;\r\n        this._opts = opts || {};\r\n\r\n        // Validate the options\r\n        let p = this._opts.position;\r\n        if (p) {\r\n            p = p.toLowerCase();\r\n        }\r\n        if (p !== 'top' && p !== 'bottom' &&\r\n            p !== 'left' && p !== 'right') {\r\n            this._opts.position = 'top';\r\n        }\r\n        if (this._opts.border === undefined) {\r\n            this._opts.border = {};\r\n        }\r\n        if (this._opts.pointer === undefined) {\r\n            this._opts.pointer = true;\r\n        }\r\n        if (this._opts.shadow === undefined) {\r\n            this._opts.shadow = {};\r\n        }\r\n    }\r\n\r\n    // Go through each element under the wrapper with the provided class name\r\n    eachByClassName(className, lambda) {\r\n        if (this._floatWrapper) {\r\n            const elements = this._floatWrapper.getElementsByClassName(_classPrefix + className);\r\n            for (let i = 0; i < elements.length; i++) {\r\n                if (lambda) {\r\n                    lambda.apply(this, [elements[i]]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Attach the info window to the specific marker.\r\n    attach(marker) {\r\n        if (google && marker !== undefined) {\r\n            this._marker = marker;\r\n            google.maps.event.addListener(this._marker, 'click', () => {\r\n                this.open();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Open the info window after attaching to a specific marker.\r\n    open() {\r\n        if (this._marker) {\r\n            this.setMap(this._marker.getMap());\r\n        }\r\n    }\r\n\r\n    // Close the info window.\r\n    close() {\r\n        this.setMap(null);\r\n    }\r\n\r\n    // Implementation of OverlayView draw method.\r\n    draw() {\r\n        if (!this._marker || !this._floatWrapper) {\r\n            return;\r\n        }\r\n\r\n        // Returns a capitalized position for assigning styles\r\n        let p = this._opts.position;\r\n        p = p.charAt(0).toUpperCase() + p.slice(1);\r\n        const capitalizedPosition = p;\r\n\r\n        // 1. Assign offset\r\n        const offset = this._opts.offset;\r\n        if (offset) {\r\n            if (offset.left) {\r\n                this.eachByClassName(`wrapper-${this._opts.position}`, (e) => {\r\n                    e.style.marginLeft = offset.left;\r\n                });\r\n            }\r\n            if (offset.top) {\r\n                this.eachByClassName(`wrapper-${this._opts.position}`, (e) => {\r\n                    e.style.marginTop = offset.top;\r\n                });\r\n            }\r\n        }\r\n        // 2. Set the background color\r\n        const bg = this._opts.backgroundColor;\r\n        if (bg) {\r\n            this.eachByClassName('content', (e) => {\r\n                e.style.backgroundColor = bg;\r\n            });\r\n            if (this._opts.pointer) {\r\n                this.eachByClassName(`pointer-bg-${this._opts.position}`, (e) => {\r\n                    e.style[`border${capitalizedPosition}Color`] = bg;\r\n                });\r\n            }\r\n        }\r\n        // 3. Padding\r\n        if (this._opts.padding) {\r\n            this.eachByClassName('frame', (e) => {\r\n                e.style.padding = this._opts.padding;\r\n            });\r\n        }\r\n        // 4. Border radius\r\n        if (this._opts.borderRadius) {\r\n            this.eachByClassName('frame', (e) => {\r\n                e.style.borderRadius = this._opts.borderRadius;\r\n            });\r\n        }\r\n        // 5. Font Color\r\n        if (this._opts.fontColor) {\r\n            this.eachByClassName(`wrapper-${this._opts.position}`, (e) => {\r\n                e.style.color = this._opts.fontColor;\r\n            });\r\n        }\r\n        // 6. Font Size\r\n        if (this._opts.fontSize) {\r\n            this.eachByClassName(`wrapper-${this._opts.position}`, (e) => {\r\n                e.style.fontSize = this._opts.fontSize;\r\n            });\r\n        }\r\n        // 7. Border\r\n        if (this._opts.border) {\r\n            if (this._opts.border.width !== undefined) {\r\n                const bWidth = parseAttribute(this._opts.border.width, '0px');\r\n                this.eachByClassName('content', (e) => {\r\n                    e.style.borderWidth = bWidth.value + bWidth.units;\r\n                });\r\n                if (this._opts.pointer) {\r\n                    this.eachByClassName(`pointer-bg-${this._opts.position}`, (e) => {\r\n                        e.style[this._opts.position] =\r\n                            Math.round(-bWidth.value * _root2) + bWidth.units;\r\n                    });\r\n                }\r\n            }\r\n            const color = this._opts.border.color;\r\n            if (color) {\r\n                this.eachByClassName('content', (e) => {\r\n                    e.style.borderColor = color;\r\n                });\r\n                if (this._opts.pointer) {\r\n                    this.eachByClassName(`pointer-border-${this._opts.position}`, (e) => {\r\n                        e.style[`border${capitalizedPosition}Color`] = color;\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            // Hide the border when border is set to false\r\n            this.eachByClassName('content', (e) => {\r\n                e.style.borderWidth = 0;\r\n            });\r\n            if (this._opts.pointer) {\r\n                this.eachByClassName(`pointer-bg-${this._opts.position}`, (e) => {\r\n                    e.style[this._opts.position] = 0;\r\n                });\r\n            }\r\n        }\r\n        // 8. Pointer\r\n        // Check if the pointer is enabled. Also make sure the value isn't just the boolean true.\r\n        if (this._opts.pointer && this._opts.pointer !== true) {\r\n            if (this._opts.shadow) {\r\n                this.eachByClassName(`shadow-pointer-${this._opts.position}`, (e) => {\r\n                    e.style.width = this._opts.pointer;\r\n                    e.style.height = this._opts.pointer;\r\n                });\r\n            }\r\n            this.eachByClassName(`pointer-${this._opts.position}`, (e) => {\r\n                e.style.borderWidth = this._opts.pointer;\r\n            });\r\n        }\r\n\r\n        // 9. Shadow\r\n        if (this._opts.shadow) {\r\n            // Check if any of the shadow settings have actually been set\r\n            const shadow = this._opts.shadow;\r\n            const isSet = (attribute) => {\r\n                const v = shadow[attribute];\r\n                return v !== undefined && v != null;\r\n            };\r\n\r\n            if (isSet('h') || isSet('v') || isSet('blur') || isSet('spread') || isSet('color')) {\r\n                const hOffset = parseAttribute(shadow.h, _defaultShadow.h);\r\n                const vOffset = parseAttribute(shadow.v, _defaultShadow.v);\r\n                const blur = parseAttribute(shadow.blur, _defaultShadow.blur);\r\n                const spread = parseAttribute(shadow.spread, _defaultShadow.spread);\r\n                const color = shadow.color || _defaultShadow.color;\r\n                const formatBoxShadow = (h, v) => {\r\n                    return `${h} ${v} ${blur.original} ${spread.original} ${color}`;\r\n                };\r\n\r\n                this.eachByClassName('shadow-frame', (e) => {\r\n                    e.style.boxShadow = formatBoxShadow(hOffset.original, vOffset.original);\r\n                });\r\n                // Correctly rotate the shadows before the css transform\r\n                const hRotated = (_inverseRoot2 * (hOffset.value - vOffset.value)) + hOffset.units;\r\n                const vRotated = (_inverseRoot2 * (hOffset.value + vOffset.value)) + vOffset.units;\r\n                this.eachByClassName(`shadow-inner-pointer-${this._opts.position}`, (e) => {\r\n                    e.style.boxShadow = formatBoxShadow(hRotated, vRotated);\r\n                });\r\n            }\r\n            if (this._opts.shadow.opacity) {\r\n                this.eachByClassName(`shadow-wrapper-${this._opts.position}`, (e) => {\r\n                    e.style.opacity = this._opts.shadow.opacity;\r\n                });\r\n            }\r\n        }\r\n\r\n        const markerPos = this.getProjection().fromLatLngToDivPixel(this._marker.position);\r\n        this._floatWrapper.style.top = `${Math.floor(markerPos.y)}px`;\r\n        this._floatWrapper.style.left = `${Math.floor(markerPos.x)}px`;\r\n    }\r\n\r\n    // Implementation of OverlayView onAdd method.\r\n    onAdd() {\r\n        if (this._floatWrapper) {\r\n            return;\r\n        }\r\n        // Used for creating new elements\r\n        const newElement = (...args) => {\r\n            const element = document.createElement('div');\r\n            if (args) {\r\n                for (let i = 0; i < args.length; i++) {\r\n                    const className = args[i];\r\n                    if (className) {\r\n                        if (element.className) {\r\n                            element.className += ' ';\r\n                        }\r\n                        element.className += _classPrefix + className;\r\n                    }\r\n                }\r\n            }\r\n            return element;\r\n        };\r\n\r\n        // 1. Create the wrapper\r\n        const wrapper = newElement(\r\n            `wrapper-${this._opts.position}`\r\n        );\r\n        if (this._opts.wrapperClass) {\r\n            wrapper.className += ` ${this._opts.wrapperClass}`;\r\n        }\r\n\r\n        // 2. Create the shadow\r\n        if (this._opts.shadow) {\r\n            const shadowWrapper = newElement(\r\n                `shadow-wrapper-${this._opts.position}`\r\n            );\r\n            const shadowFrame = newElement(\r\n                'frame',\r\n                'shadow-frame'\r\n            );\r\n            shadowWrapper.appendChild(shadowFrame);\r\n\r\n            if (this._opts.pointer) {\r\n                const shadowPointer = newElement(\r\n                    `shadow-pointer-${this._opts.position}`\r\n                );\r\n                const shadowPointerInner = newElement(\r\n                    `shadow-inner-pointer-${this._opts.position}`\r\n                );\r\n                shadowPointer.appendChild(shadowPointerInner);\r\n                shadowWrapper.appendChild(shadowPointer);\r\n            }\r\n\r\n            wrapper.appendChild(shadowWrapper);\r\n        }\r\n\r\n        // 3. Create the content\r\n        const contentWrapper = newElement(\r\n            'frame',\r\n            'content-wrapper'\r\n        );\r\n        const content = newElement(\r\n            'content'\r\n        );\r\n        if (this._opts.content) {\r\n            content.innerHTML = this._opts.content;\r\n        }\r\n        contentWrapper.appendChild(content);\r\n        wrapper.appendChild(contentWrapper);\r\n\r\n        // 4. Create the pointer\r\n        if (this._opts.pointer) {\r\n            const pointerBorder = newElement(\r\n                `pointer-${this._opts.position}`,\r\n                `pointer-border-${this._opts.position}`\r\n            );\r\n            const pointerBg = newElement(\r\n                `pointer-${this._opts.position}`,\r\n                `pointer-bg-${this._opts.position}`\r\n            );\r\n            wrapper.appendChild(pointerBorder);\r\n            wrapper.appendChild(pointerBg);\r\n        }\r\n\r\n        // Create an outer wrapper\r\n        const floatWrapper = newElement(\r\n            'float-wrapper'\r\n        );\r\n        floatWrapper.appendChild(wrapper);\r\n        this._floatWrapper = floatWrapper;\r\n\r\n        // Add the wrapper to the Google Maps float pane\r\n        this.getPanes().floatPane.appendChild(this._floatWrapper);\r\n    }\r\n\r\n    // Implementation of OverlayView onRemove method\r\n    onRemove() {\r\n        if (this._floatWrapper) {\r\n            const parent = this._floatWrapper.parentElement;\r\n            if (parent) {\r\n                parent.removeChild(this._floatWrapper);\r\n            }\r\n            this._floatWrapper = null;\r\n        }\r\n    }\r\n}\r\n"]}